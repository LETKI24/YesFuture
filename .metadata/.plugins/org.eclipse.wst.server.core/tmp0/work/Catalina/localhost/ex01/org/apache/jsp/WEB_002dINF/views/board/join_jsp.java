/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2024-12-17 06:31:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<!-- jquery 라이브러리 import -->\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.js\">\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\r\n");
      out.write("<style>\r\n");
      out.write("/* 경고 메시지를 빨간색으로 표시 */\r\n");
      out.write(".error-message {\r\n");
      out.write("	color: red;\r\n");
      out.write("	font-size: 20px;\r\n");
      out.write("	display: none; /* 기본적으로 숨기기 */\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>YesFuture 회원가입</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	포르쉐 사자\r\n");
      out.write("\r\n");
      out.write("	<h2>회원 가입</h2>\r\n");
      out.write("	<form action=\"join\" method=\"post\" onsubmit=\"return checkPassword() && combineEmail()\">\r\n");
      out.write("		<label for=\"memberName\">회원 이름 :</label> <input type=\"text\"\r\n");
      out.write("			id=\"memberName\" name=\"memberName\" required><br> <br>\r\n");
      out.write("\r\n");
      out.write("		<label for=\"memberNickname\">회원 닉네임 :</label> <input type=\"text\"\r\n");
      out.write("			id=\"memberNickname\" name=\"memberNickname\" required><br>\r\n");
      out.write("		<!-- 중복 닉네임 경고 메시지 -->\r\n");
      out.write("		<span id=\"nicknameError\" style=\"color: red; display: none;\">중복된\r\n");
      out.write("			닉네임 입니다.</span> <br> \r\n");
      out.write("			\r\n");
      out.write("			<label for=\"memberEmailId\">회원 이메일 :</label> <input\r\n");
      out.write("			type=\"text\" id=\"memberEmailId\" name=\"memberEmailId\" required> @ <select\r\n");
      out.write("			id=\"emailSelect\" name=\"emailSelect\" required>\r\n");
      out.write("			<option value=\"naver.com\">naver.com</option>\r\n");
      out.write("			<option value=\"gmail.com\">gmail.com</option>\r\n");
      out.write("			<option value=\"yahoo.com\">yahoo.com</option>\r\n");
      out.write("		</select><br>\r\n");
      out.write("		\r\n");
      out.write("		<input type=\"hidden\" id=\"memberEmail\" name=\"memberEmail\">\r\n");
      out.write("\r\n");
      out.write("		<!-- 중복 이메일 경고 메시지 -->\r\n");
      out.write("		<span id=\"emailError\" style=\"color: red; display: none;\">이미\r\n");
      out.write("			가입된 이메일 입니다.</span> <br> \r\n");
      out.write("			<label for=\"memberPw\">회원 비밀번호 :</label> \r\n");
      out.write("			<input type=\"password\" id=\"memberPw\" name=\"memberPw\" required>\r\n");
      out.write("		<!-- 눈 모양 아이콘 (FontAwesome 아이콘 예시) -->\r\n");
      out.write("		<i id=\"togglePassword\" class=\"fa fa-eye\" style=\"cursor: pointer;\"></i><br>\r\n");
      out.write("\r\n");
      out.write("		<!-- 비밀번호 조건 불충족 메시지를 표시할 부분 -->\r\n");
      out.write("		<span id=\"passwordConditionError\" class=\"error-message\">비밀번호는\r\n");
      out.write("			8~16자 영문 대소문자, 숫자, !@#$%^&*와 같은 특수문자를 포함해주세요.</span> <br> <br> \r\n");
      out.write("			<label for=\"confirmPassword\">회원 비밀번호 확인 :</label> \r\n");
      out.write("			<input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required><br>\r\n");
      out.write("		<br> \r\n");
      out.write("		\r\n");
      out.write("		<label for=\"memberSchool\">회원 출신 학교 :</label> \r\n");
      out.write("		<select id=\"memberSchool\" name=\"memberSchool\" required>\r\n");
      out.write("			<option value=\"연세대학교 의과대학\">연세대학교 의과대학</option>\r\n");
      out.write("			<option value=\"서울대학교 의과대학\">서울대학교 의과대학</option>\r\n");
      out.write("		</select><br> <br> \r\n");
      out.write("		\r\n");
      out.write("		<label for=\"memberPhone\">회원 전화번호 :</label>\r\n");
      out.write("		<textarea id=\"memberPhone\" name=\"memberPhone\" placeholder=\"-없이 입력\"\r\n");
      out.write("			required></textarea>\r\n");
      out.write("		<br> <br> \r\n");
      out.write("		\r\n");
      out.write("		<input type=\"submit\" id=\"submitButton\" value=\"회원 가입\" disabled>\r\n");
      out.write("		\r\n");
      out.write("	</form>\r\n");
      out.write("\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		$(document).ready(function() {\r\n");
      out.write("			\r\n");
      out.write("			// 이메일 주소 합치기\r\n");
      out.write("			function combineEmail() {\r\n");
      out.write("				// 이메일 조합\r\n");
      out.write("		        const emailLocal = document.getElementById(\"memberEmailId\").value;\r\n");
      out.write("		        const emailDomain = document.getElementById(\"emailSelect\").value;\r\n");
      out.write("		        const memberEmail = emailLocal + \"@\" + emailDomain;\r\n");
      out.write("		        \r\n");
      out.write("		        console.log(\"email : \"+ memberEmail)\r\n");
      out.write("		        \r\n");
      out.write("		        // 조합된 이메일을 hidden input에 설정\r\n");
      out.write("		        document.getElementById(\"memberEmail\").value = memberEmail;\r\n");
      out.write("		        \r\n");
      out.write("		        checkEmailDuplicate(memberEmail);\r\n");
      out.write("			}			\r\n");
      out.write("			\r\n");
      out.write("			let nicknameValid = false;\r\n");
      out.write("		    let emailValid = false;\r\n");
      out.write("		    let passwordValid = false;\r\n");
      out.write("						\r\n");
      out.write("			// 닉네임 중복확인 기능\r\n");
      out.write("			$('#memberNickname').focusout(function() {\r\n");
      out.write("				var memberNickname = $('#memberNickname').val(); // 입력된 닉네임 가져오기\r\n");
      out.write("\r\n");
      out.write("				// $.ajax로 송수신\r\n");
      out.write("				if (memberNickname != null && memberNickname != \"\") {\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						type : 'POST', // 메서드 타입\r\n");
      out.write("						url : '../board/nickname', // url\r\n");
      out.write("						//	headers : { // 헤더 정보\r\n");
      out.write("						//		'Content-Type' : 'application/json' // json content-type 설정\r\n");
      out.write("						//	}, // 여기 'application/json'이 있어야 문제가 안생긴다.\r\n");
      out.write("						data : {\r\n");
      out.write("							memberNickname : memberNickname\r\n");
      out.write("						}, // 파라미터로 전송\r\n");
      out.write("						success : function(result) { // 전송 성공 시 서버에서 result 값 전송\r\n");
      out.write("							console.log(result);\r\n");
      out.write("							if (result == 1) {\r\n");
      out.write("								// 중복 닉네임이 있으면 경고 메시지 보이기\r\n");
      out.write("								$('#nicknameError').show();\r\n");
      out.write("								nicknameValid = false;\r\n");
      out.write("							} else {\r\n");
      out.write("								// 중복이 없으면 경고 메시지 숨기기\r\n");
      out.write("								$('#nicknameError').hide();\r\n");
      out.write("								nicknameValid = true;\r\n");
      out.write("							}\r\n");
      out.write("							validateForm();\r\n");
      out.write("						}\r\n");
      out.write("					});\r\n");
      out.write("				}\r\n");
      out.write("			})// end focusout - nickname duplicate\r\n");
      out.write("\r\n");
      out.write("			// 이메일 중복확인 기능\r\n");
      out.write("			function checkEmailDuplicate(memberEmail) {\r\n");
      out.write("				var memberEmailId = $('#memberEmailId').val(); // 입력된 이메일 가져오기\r\n");
      out.write("\r\n");
      out.write("				// $.ajax로 송수신\r\n");
      out.write("				if (memberEmailId != null && memberEmailId != \"\") {\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						type : 'POST', // 메서드 타입\r\n");
      out.write("						url : '../board/email', // url\r\n");
      out.write("						data : {\r\n");
      out.write("							memberEmail : memberEmail\r\n");
      out.write("						}, // 파라미터로 전송\r\n");
      out.write("						success : function(result) { // 전송 성공 시 서버에서 result 값 전송\r\n");
      out.write("							console.log(result);\r\n");
      out.write("							if (result == 1) {\r\n");
      out.write("								// 중복 이메일 있으면 경고 메시지 보이기\r\n");
      out.write("								$('#emailError').show();\r\n");
      out.write("								emailValid = false;\r\n");
      out.write("							} else {\r\n");
      out.write("								// 중복이 없으면 경고 메시지 숨기기\r\n");
      out.write("								$('#emailError').hide();\r\n");
      out.write("								emailValid = true;\r\n");
      out.write("							}\r\n");
      out.write("							validateForm();\r\n");
      out.write("						}\r\n");
      out.write("					});\r\n");
      out.write("				}\r\n");
      out.write("			} // end focusout - email duplicate\r\n");
      out.write("			\r\n");
      out.write("		    $('#memberEmailId, #emailSelect').on('focusout', function() {\r\n");
      out.write("		        combineEmail(); // 이메일 합치기 + 중복 검사 실행\r\n");
      out.write("		    });			\r\n");
      out.write("			\r\n");
      out.write("			// 비밀번호 확인 체크\r\n");
      out.write("			function checkPassword() {\r\n");
      out.write("				var memberPw = document.getElementById(\"memberPw\").value;\r\n");
      out.write("				var confirmPassword = document.getElementById(\"confirmPassword\").value;\r\n");
      out.write("				var errorMessage = document\r\n");
      out.write("						.getElementById(\"passwordConditionError\");\r\n");
      out.write("\r\n");
      out.write("				// 비밀번호 조건 (8~16자, 영문 대/소문자, 숫자, 특수문자)\r\n");
      out.write("				const passwordRegex = /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*])[a-zA-Z\\d!@#$%^&*]{8,16}$/;\r\n");
      out.write("\r\n");
      out.write("				if (!passwordRegex.test(memberPw)) {\r\n");
      out.write("					errorMessage.style.display = 'inline'; // 경고 메시지 보이기\r\n");
      out.write("					passwordValid = false;\r\n");
      out.write("				} else if (memberPw !== confirmPassword) {\r\n");
      out.write("					// 비밀번호가 조건을 만족하지 않으면 경고 메시지 표시\r\n");
      out.write("					errorMessage.innerText = '비밀번호가 일치하지 않습니다.';\r\n");
      out.write("					errorMessage.style.display = 'inline'; // 경고 메시지 보이기\r\n");
      out.write("					passwordValid = false;\r\n");
      out.write("				} else {\r\n");
      out.write("					errorMessage.style.display = 'none'; // 경고 메시지 숨기기\r\n");
      out.write("					passwordValid = true;\r\n");
      out.write("				}\r\n");
      out.write("				validateForm();\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			// 비밀번호 확인 입력 필드에서 포커스를 잃을 때마다 checkPassword() 호출\r\n");
      out.write("			document.getElementById(\"memberPw\").addEventListener(\"focusout\",\r\n");
      out.write("					checkPassword);\r\n");
      out.write("			document.getElementById(\"confirmPassword\").addEventListener(\"focusout\",\r\n");
      out.write("					checkPassword);\r\n");
      out.write("\r\n");
      out.write("			// 비밀번호 보이기/숨기기 토글 기능\r\n");
      out.write("			const togglePassword = document.getElementById('togglePassword');\r\n");
      out.write("			const passwordField = document.getElementById('memberPw');\r\n");
      out.write("\r\n");
      out.write("			togglePassword.addEventListener('click', function() {\r\n");
      out.write("				// 비밀번호 필드의 type을 'password'와 'text'로 토글\r\n");
      out.write("				const type = passwordField.type === 'password' ? 'text'\r\n");
      out.write("						: 'password';\r\n");
      out.write("				passwordField.type = type;\r\n");
      out.write("\r\n");
      out.write("				// 아이콘의 변경 (보이기/숨기기 아이콘을 바꿈)\r\n");
      out.write("				this.classList.toggle('fa-eye'); // 눈 모양 아이콘\r\n");
      out.write("				this.classList.toggle('fa-eye-slash'); // 눈 감은 아이콘\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			// 폼 전체 검증 함수\r\n");
      out.write("		    function validateForm() {\r\n");
      out.write("		        if (nicknameValid && emailValid && passwordValid) {\r\n");
      out.write("		            $('#submitButton').prop('disabled', false); // 버튼 활성화\r\n");
      out.write("		        } else {\r\n");
      out.write("		            $('#submitButton').prop('disabled', true); // 버튼 비활성화\r\n");
      out.write("		        }\r\n");
      out.write("		    }\r\n");
      out.write("						\r\n");
      out.write("		}); // end document\r\n");
      out.write("		\r\n");
      out.write("\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
