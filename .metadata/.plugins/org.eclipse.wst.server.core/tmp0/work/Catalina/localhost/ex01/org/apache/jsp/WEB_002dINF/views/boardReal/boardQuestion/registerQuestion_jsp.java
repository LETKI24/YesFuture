/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2025-01-09 08:19:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.boardReal.boardQuestion;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class registerQuestion_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/sdedu/Desktop/SPRING_CODES/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/KMS_PROJECT_YESFUTURE/WEB-INF/lib/spring-security-taglibs-5.2.2.RELEASE.jar!/META-INF/security.tld", Long.valueOf(1580887502000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-5.2.2.RELEASE.jar", Long.valueOf(1733808086903L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fsec_005fauthentication_0026_005fproperty_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fsec_005fauthentication_0026_005fproperty_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fsec_005fauthentication_0026_005fproperty_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta name=\"_csrf\" content=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.token}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("<meta name=\"_csrf_header\" content=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.headerName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("<!-- css 파일 불러오기 -->\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/image.css\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/attach.css\">\r\n");
      out.write("\r\n");
      out.write("<title>질문글 작성 페이지</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h2>질문글 쓰기</h2>\r\n");
      out.write("	<form id=\"registerQuestionForm\" action=\"registerQuestion\" method=\"POST\">\r\n");
      out.write("		<!-- input 태그의 name은 vo의 멤버 변수 이름과 동일하게 작성 -->\r\n");
      out.write("		<div>\r\n");
      out.write("			<p>작성자 :</p>\r\n");
      out.write("			<input type=\"text\" name=\"memberNickname\"\r\n");
      out.write("				value=\"");
      if (_jspx_meth_sec_005fauthentication_005f0(_jspx_page_context))
        return;
      out.write("\"\r\n");
      out.write("				readonly>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<p>제목 :</p>\r\n");
      out.write("			<input type=\"text\" id=\"boardQuestionTitle\" \r\n");
      out.write("				name=\"boardQuestionTitle\" placeholder=\"제목 입력\"\r\n");
      out.write("				maxlength=\"45\" required>(한글 45자 이내)\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("		<div>\r\n");
      out.write("			<p>내용 :</p>\r\n");
      out.write("			<textarea rows=\"20\" cols=\"120\" id=\"boardQuestionContent\"\r\n");
      out.write("				name=\"boardQuestionContent\" placeholder=\"내용 입력\" maxlength=\"300\"\r\n");
      out.write("				required></textarea>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div>\r\n");
      out.write("\r\n");
      out.write("			<!-- 스프링 시큐리티를 사용하면 모든 post 전송에 csrf 토큰을 추가해야 함 -->\r\n");
      out.write("			<input type=\"hidden\" name=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.parameterName }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("				value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${_csrf.token }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("		</div>\r\n");
      out.write("	</form>\r\n");
      out.write("\r\n");
      out.write("	<hr>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"image-upload\">\r\n");
      out.write("		<h2>이미지 파일 업로드</h2>\r\n");
      out.write("		<p>* 이미지 파일은 최대 3개까지 가능합니다.</p>\r\n");
      out.write("		<p>* 최대 용량은 10MB 입니다.</p>\r\n");
      out.write("		<div class=\"image-drop\"></div>\r\n");
      out.write("		<h2>선택한 이미지 파일 :</h2>\r\n");
      out.write("		<div class=\"image-list\"></div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<hr>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"attach-upload\">\r\n");
      out.write("		<h2>첨부 파일 업로드</h2>\r\n");
      out.write("		<p>* 첨부 파일은 최대 3개까지 가능합니다.</p>\r\n");
      out.write("		<p>* 최대 용량은 10MB 입니다.</p>\r\n");
      out.write("		<input type=\"file\" id=\"attachInput\" name=\"files\" multiple=\"multiple\"><br>\r\n");
      out.write("		<h2>선택한 첨부 파일 정보 :</h2>\r\n");
      out.write("		<div class=\"attach-list\"></div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"attachQuestionVOImg-list\"></div>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"attachQuestionVOFile-list\"></div>\r\n");
      out.write("\r\n");
      out.write("	<button id=\"registerBoard\">질문글 등록</button>\r\n");
      out.write("\r\n");
      out.write("	<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/image.js\"></script>\r\n");
      out.write("	<script	src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/attach.js\"></script>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		// ajaxSend() : AJAX 요청이 전송되려고 할 때 실행할 함수를 지정\r\n");
      out.write("		// ajax 요청을 보낼 때마다 CSRF 토큰을 요청 헤더에 추가하는 코드\r\n");
      out.write("		$(document).ajaxSend(function(e, xhr, opt) {\r\n");
      out.write("			var token = $(\"meta[name='_csrf']\").attr(\"content\");\r\n");
      out.write("			var header = $(\"meta[name='_csrf_header']\").attr(\"content\");\r\n");
      out.write("\r\n");
      out.write("			xhr.setRequestHeader(header, token);\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		$(document).ready(function() {\r\n");
      out.write("			// regsiterForm 데이터 전송\r\n");
      out.write("			$('#registerBoard').click(function() {\r\n");
      out.write("				var title = $('#boardQuestionTitle').val().trim(); // 문자열의 양 끝 공백 제거\r\n");
      out.write("	            var content = $('#boardQuestionContent').val().trim();\r\n");
      out.write("\r\n");
      out.write("	            if (title === '' || content === '') {\r\n");
      out.write("	                alert(\"제목과 내용을 모두 입력해주세요.\");\r\n");
      out.write("	                return;\r\n");
      out.write("	            }\r\n");
      out.write("	            \r\n");
      out.write("				// form 객체 참조\r\n");
      out.write("				var registerForm = $('#registerQuestionForm');\r\n");
      out.write("				\r\n");
      out.write("				// attachDTOImg-list의 각 input 태그 접근\r\n");
      out.write("				var i = 0;\r\n");
      out.write("				$('.attachQuestionVOImg-list input[name=\"attachQuestionVO\"]').each(function(){\r\n");
      out.write("					console.log(this);\r\n");
      out.write("					// JSON attachQuestionDTO 데이터를 object 변경\r\n");
      out.write("					var attachQuestionVO = JSON.parse($(this).val());\r\n");
      out.write("					// attachQuestionPath input 생성\r\n");
      out.write("					var inputPath = $('<input>').attr('type', 'hidden')\r\n");
      out.write("							.attr('name', 'attachQuestionList[' + i + '].attachQuestionPath');\r\n");
      out.write("					inputPath.val(attachQuestionVO.attachQuestionPath);\r\n");
      out.write("					\r\n");
      out.write("					// attachRealName input 생성\r\n");
      out.write("					var inputRealName = $('<input>').attr('type', 'hidden')\r\n");
      out.write("							.attr('name', 'attachQuestionList[' + i + '].attachQuestionRealName');\r\n");
      out.write("					inputRealName.val(attachQuestionVO.attachQuestionRealName);\r\n");
      out.write("					\r\n");
      out.write("					// attachChgName input 생성\r\n");
      out.write("					var inputChgName = $('<input>').attr('type', 'hidden')\r\n");
      out.write("							.attr('name', 'attachQuestionList[' + i + '].attachQuestionChgName');\r\n");
      out.write("					inputChgName.val(attachQuestionVO.attachQuestionChgName);\r\n");
      out.write("					\r\n");
      out.write("					// attachExtension input 생성\r\n");
      out.write("					var inputExtension = $('<input>').attr('type', 'hidden')\r\n");
      out.write("							.attr('name', 'attachQuestionList[' + i + '].attachQuestionExtension');\r\n");
      out.write("					inputExtension.val(attachQuestionVO.attachQuestionExtension);\r\n");
      out.write("					\r\n");
      out.write("					// form에 태그 추가\r\n");
      out.write("					registerForm.append(inputPath);\r\n");
      out.write("					registerForm.append(inputRealName);\r\n");
      out.write("					registerForm.append(inputChgName);\r\n");
      out.write("					registerForm.append(inputExtension);\r\n");
      out.write("					\r\n");
      out.write("					i++;\r\n");
      out.write("				});\r\n");
      out.write("				\r\n");
      out.write("				// attachVOFile-list의 각 input 태그 접근\r\n");
      out.write("				$('.attachQuestionVOFile-list input[name=\"attachQuestionVO\"]').each(function(){\r\n");
      out.write("					console.log(this);\r\n");
      out.write("					// JSON attachQuestionVO 데이터를 object 변경\r\n");
      out.write("					var attachQuestionVO = JSON.parse($(this).val());\r\n");
      out.write("					// attachPath input 생성\r\n");
      out.write("					var inputPath = $('<input>').attr('type', 'hidden')\r\n");
      out.write("							.attr('name', 'attachQuestionList[' + i + '].attachQuestionPath');\r\n");
      out.write("					inputPath.val(attachQuestionVO.attachQuestionPath);\r\n");
      out.write("					\r\n");
      out.write("					// attachRealName input 생성\r\n");
      out.write("					var inputRealName = $('<input>').attr('type', 'hidden')\r\n");
      out.write("							.attr('name', 'attachQuestionList[' + i + '].attachQuestionRealName');\r\n");
      out.write("					inputRealName.val(attachQuestionVO.attachQuestionRealName);\r\n");
      out.write("					\r\n");
      out.write("					// attachChgName input 생성\r\n");
      out.write("					var inputChgName = $('<input>').attr('type', 'hidden')\r\n");
      out.write("							.attr('name', 'attachQuestionList[' + i + '].attachQuestionChgName');\r\n");
      out.write("					inputChgName.val(attachQuestionVO.attachQuestionChgName);\r\n");
      out.write("					\r\n");
      out.write("					// attachExtension input 생성\r\n");
      out.write("					var inputExtension = $('<input>').attr('type', 'hidden')\r\n");
      out.write("							.attr('name', 'attachQuestionList[' + i + '].attachQuestionExtension');\r\n");
      out.write("					inputExtension.val(attachQuestionVO.attachQuestionExtension);\r\n");
      out.write("					\r\n");
      out.write("					// form에 태그 추가\r\n");
      out.write("					registerForm.append(inputPath);\r\n");
      out.write("					registerForm.append(inputRealName);\r\n");
      out.write("					registerForm.append(inputChgName);\r\n");
      out.write("					registerForm.append(inputExtension);\r\n");
      out.write("					\r\n");
      out.write("					i++;\r\n");
      out.write("				});\r\n");
      out.write("				registerForm.submit();\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("		});\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_sec_005fauthentication_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  sec:authentication
    org.springframework.security.taglibs.authz.AuthenticationTag _jspx_th_sec_005fauthentication_005f0 = (org.springframework.security.taglibs.authz.AuthenticationTag) _005fjspx_005ftagPool_005fsec_005fauthentication_0026_005fproperty_005fnobody.get(org.springframework.security.taglibs.authz.AuthenticationTag.class);
    boolean _jspx_th_sec_005fauthentication_005f0_reused = false;
    try {
      _jspx_th_sec_005fauthentication_005f0.setPageContext(_jspx_page_context);
      _jspx_th_sec_005fauthentication_005f0.setParent(null);
      // /WEB-INF/views/boardReal/boardQuestion/registerQuestion.jsp(27,11) name = property type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_sec_005fauthentication_005f0.setProperty("principal.member.memberNickname");
      int _jspx_eval_sec_005fauthentication_005f0 = _jspx_th_sec_005fauthentication_005f0.doStartTag();
      if (_jspx_th_sec_005fauthentication_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fsec_005fauthentication_0026_005fproperty_005fnobody.reuse(_jspx_th_sec_005fauthentication_005f0);
      _jspx_th_sec_005fauthentication_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_sec_005fauthentication_005f0, _jsp_getInstanceManager(), _jspx_th_sec_005fauthentication_005f0_reused);
    }
    return false;
  }
}
